<?php
/**
 * Contains the Pusher\Apn Class
 */

/**
 * Class Apn
 * Push Apple Apn (iOS)
 *
 * We create this pusher instance for a user we want to push TO(!!)
 * So we can have multiple instances of this, if we want to multiple users (which is the common case)
 *
 */
class Apn extends \Huhu\Library\Pusher implements \Huhu\Library\Pusher\PusherInterface {
  /**
   * @var String the APN token, generated by the users mobile device
   */
  private $_token;
  /**
   * @var Int our internal user ID, to who this Pusher instance belongs
   */
  private $_userId;


  /**
   * Instanciates a new pusher for the user we want to push to. Fetches the token from the database
   * @param int $userId the ID of the user we want to push TO
   */
  public function __construct($userId) {
    $this->_userId=$userId;
    $pushMethods=\Huhu\Library\Push::getUserMethods($this->_userId);

    if (isset($pushMethods['apn'])) {
      $this->_token=$pushMethods['apn']['token'];
    }
  }


  /**
   * Push data to the user
   * @param Array $data Data which should be pushed to the client. Should be assembled thru the @see \Huhu\Library\Pusher assembleXXX Methods
   */
  public function push($data) {
    if (empty($this->_token)) return; // no token, no push

      if ($data['action']=='message') {
          // we cannot rely that push messages arrive on the smartphone,
          // also the payload-length is limited
          // so unset the fullmessage to force app to pull messages from server
          unset($data['fullmessage']);
      }


    $loop = React\EventLoop\Factory::create();

    $context = new React\ZMQ\Context($loop);

    $push = $context->getSocket(ZMQ::SOCKET_PUSH);
    $push->connect('tcp://127.0.0.1:6666');

    $msgCnt=\Huhu\Library\Chat::getUnreadMessageCount($this->_userId);
    if (!$msgCnt) $msgCnt=1;

    $push->send(
      serialize(
        Array(
          'action' => 'send',
          'receiver' => $this->_token,
          'msgcnt' => $msgCnt,
          'data' => $data,
        )
      )
    );

    $loop->run();

  }
}