<?php
/**
 * Contains the Pusher\Gcm class
 */

namespace Huhu\Library\Pusher;

/**
 * Class Gcm
 * Push via GoogleCloudMessaging(Android)
 *
 * We create this pusher instance for a user we want to push TO(!!)
 * So we can have multiple instances of this, if we want to multiple users (which is the common case)
 */
class Gcm extends \Huhu\Library\Pusher implements \Huhu\Library\Pusher\PusherInterface {
  /**
   * @var string the registration id of the google cloud messaging service, generated by the mobile device
   */
  private $_regId;
  /**
   * @var Int our internal user ID, to who this Pusher instance belongs
   */
  private $_userId;


  /**
   * Instanciates a new pusher for the user we want to push to. Fetches the token from the database
   * @param int $userId the ID of the user we want to push TO
   */
  public function __construct($userId) {
    $this->_userId=$userId;
    $pushMethods=\Huhu\Library\Push::getUserMethods($this->_userId);

    if (isset($pushMethods['gcm'])) {
      $this->_regId=$pushMethods['gcm']['token'];
    }
  }


  /**
   * Push data to the user
   * @param Array $data Data which should be pushed to the client. Should be assembled thru the @see \Huhu\Library\Pusher assembleXXX Methods
   */
  public function push($data) {
    $translate=Zend_Registry::get('Zend_Translate');


    if (empty($this->_regId)) return; // no regid, no push


    if ($data['action']=='message') {
        // we cannot rely that push messages arrive on the smartphone, so unset the fullmessage to force app to pull messages from server
        unset($data['fullmessage']);
    }


    // ok we have a reg_id, we send him a push notification...

    $data['msgcnt']=\Huhu\Library\Chat::getUnreadMessageCount($this->_userId);

    if (!$data['msgcnt']) $data['msgcnt']=1;


    $data['title']=sprintf($translate->_('%d new Huhu-Messages', $data['msgcnt']));

    $ch=curl_init('https://android.googleapis.com/gcm/send');

    $headers=Array(
      'Content-Type: application/json',
      'Authorization: key=AIzaSyCKkyPuR-2pYoXi5JhCYDTfvkjg0QPZ8Mw',
    );

    $post=Array(
      'registration_ids' => Array($this->_regId),
      'collapse_key' => 'huhu',
      'data' => $data,
    );

    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($post));
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $output=curl_exec($ch);

    $intReturnCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

    if (true || $intReturnCode != 200) {
      file_put_contents('/var/www/web18/log/google_push.log', date('Y-m-d H:i:s')."\nReturnCode: $intReturnCode\n\nReturn: $output\n===============================================\n\n", FILE_APPEND);
    }

  }
}